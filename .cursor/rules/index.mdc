---
description: 
globs: 
alwaysApply: true
---
# Tabme Chrome Extension â€” Bookmark and Tab Manager (Monorepo)

This document serves as the central index for all active Cursor rules within this monorepo, organized by category. These rules define processes, structures, and guidelines for development across both the Chrome extension frontend and Node.js backend.

## Project Overview

This is a monorepo containing:
- **Client App** (`apps/client`): Chrome extension built with React/TypeScript
- **Server App** (`apps/server`): Node.js backend API built with Express/TypeScript
- **Shared Database** (`prisma/`): PostgreSQL schema managed by Prisma ORM

## Core & General

Fundamental project structure, setup, and general development guidelines.

| Rule File                          | Description                                                 |
| :--------------------------------- | :---------------------------------------------------------- |
| @cursor-rules.mdc                  | How to add or edit Cursor rules in our project              |
| @files-structure.mdc               | Monorepo structure and file organization guidelines         |
| @installing-packages.mdc           | How to install packages                                     |
| @environment-variables.mdc         | Add environment variable                                    |
| @utilities.mdc                     | Util functions                                              |
| @task-list.mdc                     | Guidelines for creating and managing task lists             |

## Backend & API

Guidelines for implementing backend logic, APIs, and data persistence.

| Rule File                          | Description                                                 |
| :--------------------------------- | :---------------------------------------------------------- |
| @prisma.mdc                        | How to use Prisma                                           |

## Frontend & Client

Guidelines for the Chrome extension frontend development.

| Rule File                          | Description                                                 |
| :--------------------------------- | :---------------------------------------------------------- |
| @functionality.mdc                 | Explains all Tabme features                                 |

## Testing

General guidelines for application testing.

| Rule File                          | Description                                                 |
| :--------------------------------- | :---------------------------------------------------------- |
| @testing.mdc                       | Guidelines for testing the application with Jest/Vitest     |

## Monorepo Development Guidelines

### Package Management
- Install dependencies at the appropriate level (root, client, or server)
- Use workspace commands for managing monorepo dependencies

### Development Workflow
- Both apps can be developed and tested independently
- Client communicates with server through REST API
- Database migrations are shared across environments

## TypeScript General Guidelines

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Backend Architecture Principles

- Use modular architecture
- Encapsulate the API in modules.
  - One module per main domain/route.
  - One controller for its route.
    - And other controllers for secondary routes.
  - A models folder with data types.
    - DTOs validated with class-validator for inputs.
    - Declare simple types for outputs.
  - A services module with business logic and persistence.
    - Entities with Prisma for data persistence.
    - One service per entity.
- A middleware folder for Express middleware
  - Global error handling middleware.
  - Authentication middleware.
  - Validation middleware.
- A utils folder for shared utilities
  - Logging utilities
  - Password hashing utilities
  - Other shared business logic

### Frontend Architecture Principles

- Use React component architecture
- Organize components by feature or domain
- Separate business logic from UI components
- Use TypeScript interfaces for component props
- Implement proper state management
- Follow Chrome extension development best practices

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.